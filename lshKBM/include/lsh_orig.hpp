/* Copyright (c) 2013, Julian Straub <jstraub@csail.mit.edu>
 * Licensed under the GPLv3 license. See the license file LICENSE.
 * 
 * If this code is used, the following should be cited:  
 * [1] Fast Relocalization For Visual Odometry Using Binary Features (J.
 * Straub, S. Hilsenbeck, G. Schroth, R. Huitl, A. Moeller, E. Steinbach), In 
 * IEEE International Conference on Image Processing (ICIP), 2013 
 */
 #ifndef LSH_HPP_
#define LSH_HPP_

#include <Random.hpp>
#include <timer.hpp>
#include <nn.hpp>

#ifdef HAVE_TOON
  #include <TooN/TooN.h>
#endif
#include <boost/foreach.hpp>
#include <vector>

using namespace std;
#ifdef HAVE_TOON
using namespace TooN;
#endif
/* Parameters for kLSH
 *
 * k=number of best approximate nearest neighbours retrieved (not used in standard LSH)
 * l=number of hash tables
 * m=number of bits the hash function is looking at
 */
struct LshParams : public Params
{
  LshParams(vector<uint32_t> p_) : Params(p_)
  {};
  LshParams(const Params& clP) : Params(clP)
  {};
  LshParams(const LshParams& lshP) : Params(lshP.p)
  {};
  LshParams(uint32_t l, uint32_t m, uint32_t lshInterTableMode=0, uint32_t lshIntraTableMode=0)
  {
    p.push_back(l);
    p.push_back(m);
    p.push_back(lshInterTableMode);
    p.push_back(lshIntraTableMode);
    // lshInterTableMode/lshIntraTableMode:
    // 0: random (without repetition)
    // from covariance/mutual information matrix:
    // 1: most uncorrelated/least mutual information (choose minimal matrix values)
    // 2: most correlated/highest mutual information (choose maximal matrix values)
  };

  uint32_t getL() const{return p[0];};
  uint32_t getM() const{return p[1];};
  uint32_t getLshInterTableMode() const {return p[2];};
  uint32_t getLshIntraTableMode() const {return p[3];};
};

template<class Desc>
class LshTable
{
public:
  LshTable(Random& rnd, const LshParams& lshParams)
    : mRnd(rnd), mHashLength(lshParams.getM())
  {
    assert(lshParams.getLshInterTableMode()==0);
    mG.reserve(mHashLength);
    generateHashFunction();
    generateSupportBitStr();
  };

  LshTable(Random& rnd, const LshParams& lshParams, vector<double>& bitChangeProb) :
    mRnd(rnd),mHashLength(lshParams.getM()), mHashFctPrior(bitChangeProb), mHashFctSamplingPrior(bitChangeProb.size()+1,0.0)
  {
    mG.reserve(mHashLength);

    for(uint32_t i=0; i<mHashFctPrior.size(); ++i) mHashFctPrior[i]=1-mHashFctPrior[i]; // get bit stable probability
    double sum=0.0;
    for(uint32_t i=0; i<mHashFctPrior.size(); ++i) sum+=mHashFctPrior[i]; // normalize to 1
    for(uint32_t i=0; i<mHashFctPrior.size(); ++i) mHashFctPrior[i]/=sum; // normalize to 1
    cout<<"mHashFctSamplingPrior: "<<endl;
    for(uint32_t i=0; i<mHashFctPrior.size(); ++i)
    {
      mHashFctSamplingPrior[i+1]=mHashFctSamplingPrior[i]+mHashFctPrior[i]; // compute the integral.
      cout<<mHashFctSamplingPrior[i+1]<<" ";
    }; cout<<endl;

    generateHashFunction(mHashFctSamplingPrior);
    generateSupportBitStr();
  };
#ifdef HAVE_TOON
  LshTable(Random& rnd, const LshParams& lshParams,
      const Matrix<BriefDesc::N_BITS,BriefDesc::N_BITS>* corr, uint32_t gStart=999)
  : mRnd(rnd),mHashLength(lshParams.getM())
  {
    mG.reserve(mHashLength);
    if(lshParams.getLshInterTableMode()==0)
      generateHashFunction();
    else if(lshParams.getLshInterTableMode()==1)
      generateHashFunctionCovSoft(corr,lshParams.getLshInterTableMode(),gStart);
    else if(lshParams.getLshInterTableMode()==2)
      generateHashFunctionCovSoft(corr,lshParams.getLshInterTableMode(),gStart);
    else
      assert(false);
    generateSupportBitStr();
  };
#endif

  void store(Desc* desc)
  {
    mT[computeHash(desc->bd)].push_back(desc);
  }

  const vector<Desc*>* get(Desc* desc) const
  {
    typename map<uint32_t,vector<Desc*> >::const_iterator bucketIt=mT.find(computeHash(desc->bd));
    if(bucketIt != mT.end()){
      return &(bucketIt->second);
    }else{
      return NULL;
    }
  }

  // number of buckets
  uint32_t numBuckets(){return mT.size();};

  // number of data elements in the buckets
  uint32_t numElems()
  {
    uint32_t s=0;
    for(typename map<uint32_t,vector<Desc*> >::iterator it=mT.begin(); it!=mT.end(); it++)
      s+=it->second.size();
    return s;
  }

  vector<uint32_t> getHashFunction()
  {
    vector<uint32_t> g(mHashLength,0);
    for(uint32_t i=0;i<mHashLength; ++i)
      g[i]=mG[i].first*8+mG[i].second;
    return g;
  }

  /* perform OR of supp with mSupport -> in supp show where support of this hash
   * table is. Can be used to find joint support of several hash tables
   */
  void signalSupport(BriefDesc& supp) const
  {
    uint8_t* bd=mSupport.bd;
    uint8_t* bd2=supp.bd;

    for (size_t i=0; i<BriefDesc::N_INTS; ++i){
      (*reinterpret_cast<uint32_t*>(bd2+i*4) |=(*reinterpret_cast<uint32_t*>(bd+i*4)));
    }
  }

#ifdef HAVE_TOON
  /* corr: correlation matrix
   * g: positions/indices which we want to be most uncorrelated with.
   *
   */
  static uint32_t getMostUncorrelated(const Matrix<BriefDesc::N_BITS,BriefDesc::N_BITS>* corr,
      const vector<uint32_t>& g)
  {
    uint32_t jMin=0;
    double corrMin=FLT_MAX;
    for(uint32_t j=0; j<BriefDesc::N_BITS; ++j)
    {
      // ensure that the hash function is made up of
      // unique bit string positions
      bool alreadyInHashFunction=false;
      for(uint32_t k=0; k<g.size(); ++k)
        if(g[k]==j){
          alreadyInHashFunction=true;
          break;
        }
      if(alreadyInHashFunction) continue;

      // use the sum over all bit positions already in the hash function
      // in order to get the next bit position, which adds the least correlation
      // to the hash function
      double corrSum=0.0;
      for(uint32_t k=0; k<g.size(); ++k)
        corrSum+=fabs((*corr)[g[k]][j]);
      if(corrMin>corrSum)
      {
        corrMin=corrSum;
        jMin=j;
      }
    }
    return jMin;
  };

  /* corr: correlation matrix
   * g: positions/indices which we want to be most uncorrelated with.
   *
   */
  static uint32_t getMostCorrelated(const Matrix<BriefDesc::N_BITS,BriefDesc::N_BITS>* corr,
      const vector<uint32_t>& g)
  {
    uint32_t jMax=0;
    double corrMax=-FLT_MAX;
    for(uint32_t j=0; j<BriefDesc::N_BITS; ++j)
    {
      // ensure that the hash function is made up of
      // unique bit string positions
      // also ensures that values of diagonal of corr are never looked at
      bool alreadyInHashFunction=false;
      for(uint32_t k=0; k<g.size(); ++k)
        if(g[k]==j){
          alreadyInHashFunction=true;
          break;
        }
      if(alreadyInHashFunction) continue;

      // use the sum over all bit positions already in the hash function
      // in order to get the next bit position, which adds the least correlation
      // to the hash function
      double corrSum=0.0;
      for(uint32_t k=0; k<g.size(); ++k)
        corrSum+=fabs((*corr)[g[k]][j]);
      if(corrMax<corrSum)
      {
        corrMax=corrSum;
        jMax=j;
      }
    }
    return jMax;
  };
#endif

private:
  Random& mRnd; // random number generator to generate hash function
  const uint32_t mHashLength;

  map<uint32_t,vector<Desc*> > mT; // hash table
  vector<pair<uint32_t,uint32_t> > mG; // hash function
  vector<double> mHashFctPrior;
  vector<double> mHashFctSamplingPrior;
  const static uint32_t SAMPLE_SIZE=10000;

  BriefDescS mSupport;

  void generateSupportBitStr()
  {
    assert(mHashLength == mG.size());
    mSupport.setZero();
    for(uint32_t i=0; i<mHashLength; ++i)
    {
      mSupport.bd[mG[i].first] |= (1<<mG[i].second);
    }
  }

  /* Compute hash value from a given hash function
   *
   */
  uint32_t computeHash(const uint8_t* bd) const
  {
    uint32_t hash=0;
    for(uint32_t i=0; i<mG.size(); ++i)
      hash |= (((bd[mG[i].first] & (1<<mG[i].second))>>mG[i].second)<<i);
    return hash;
  };

  void generateHashFunction(vector<double>& hashFctSamplingPrior)
  {
    for(uint32_t i=0; i<mHashLength; ++i)
    {
      // draw without repetitions.
      bool alreadyDrawn=true;
      uint32_t g=0,g0=0,g1=0;

      while(alreadyDrawn)
      {
        alreadyDrawn=false;
        double s=double(mRnd(SAMPLE_SIZE))/double(SAMPLE_SIZE); // sample number between 0 and 1 with 1/SAMPLE_SIZE resolution
        for(uint32_t j=0; j<hashFctSamplingPrior.size()-1; ++j)
          if(hashFctSamplingPrior[j]<s && s<hashFctSamplingPrior[j+1]) g=j; // get bit number with the probabilities defined in hashFctSamplingPrior

        g0=g/8; g1=g%8;
        for(uint32_t j=0; j<mG.size(); ++j)
          alreadyDrawn |=  (g0==mG[j].first && g1==mG[j].second); // check that we are not drawing the same twice
      }
      mG.push_back(pair<uint32_t,uint32_t>(g0,g1));
//      cout<<g0<<" "<<g1<<endl;
    }
  }

  void generateHashFunction()
  {
    for(uint32_t i=0; i<mHashLength; ++i)
    {
      uint32_t g=mRnd.drawWithoutRepetition(Desc::BRIEF_K*8, i==0);
      mG.push_back(pair<uint32_t,uint32_t>(g/8,g%8));
    }
  }
#ifdef HAVE_TOON
  /* Generate hash function using the correlation between the bit positions in
   * the bit string of the brief descriptor
   */
  void generateHashFunctionCovHard(const Matrix<BriefDesc::N_BITS,BriefDesc::N_BITS>* corr,
      uint32_t lshInterTableMode, uint32_t gStart)
  {
    assert(corr!=NULL);
    assert(mG.size()==0);
    vector<uint32_t> g;
    mG.reserve(mHashLength);
    g.reserve(mHashLength);
    if(gStart<256)
      g.push_back(gStart);
    else
      // reset once outside by LSH class -> ensures, that all hash tables get different hash functions
      g.push_back(mRnd.drawWithoutRepetition(BriefDesc::N_BITS));

    for(uint32_t i=1; i<mHashLength; ++i)
    {
      // find the best next bit position to add
      // best in the sense that it adds least to the correlation
      // between the hash function bit positions
      uint32_t j;
      if(lshInterTableMode==1)
        j=getMostUncorrelated(corr, g);
      else if(lshInterTableMode==2)
        j=getMostCorrelated(corr, g);
      else
        assert(false);
      g.push_back(j);
    }
    // convert into vector of pairs for fast bit lookup
    for(uint32_t i=0; i<mHashLength; ++i)
      mG.push_back(pair<uint32_t,uint32_t>(g[i]/8,g[i]%8));

//    double norm=0.0; //frobenius norm
//    for(uint32_t i=0; i<mHashLength; ++i)
//    {
//      for(uint32_t j=0; j<mHashLength; ++j)
//      {
//        norm+=((*corr)[g[i]][g[j]])*((*corr)[g[i]][g[j]]);
//      }
//      cout<<g[i]<<";";
//    }
//    norm=sqrt(norm);
//    cout<<endl<<"Hashcode correlation norm="<<norm<<endl;
  }

  void generateHashFunctionCovSoft(const Matrix<BriefDesc::N_BITS,BriefDesc::N_BITS>* corr,
      uint32_t lshInterTableMode, uint32_t gStart)
  {
    assert(corr!=NULL);
    assert(mG.size()==0);
    vector<uint32_t> g;
    mG.reserve(mHashLength);
    g.reserve(mHashLength);
    if(gStart<256)
      g.push_back(gStart);
    else
      // reset once outside by LSH class -> ensures, that all hash tables get different hash functions
      g.push_back(mRnd.drawWithoutRepetition(BriefDesc::N_BITS));

    for(uint32_t i=1; i<mHashLength; ++i)
    {
      // find the best next bit position to add
      // best in the sense that it adds least to the correlation
      // between the hash function bit positions
      vector<uint32_t> indices;
      vector<double> corrSum;
      for(uint32_t j=0; j<BriefDesc::N_BITS; ++j)
      {
        // ensure that the hash function is made up of
        // unique bit string positions
        bool alreadyInHashFunction=false;
        for(uint32_t k=0; k<g.size(); ++k)
          if(g[k]==j){
            alreadyInHashFunction=true;
            break;
          }
        if(alreadyInHashFunction) continue;

        // use the sum over all bit positions already in the hash function
        // in order to get the next bit position, which adds the least correlation
        // to the hash function
        double corrSumSingle=0.0;
        for(uint32_t k=0; k<g.size(); ++k)
          corrSumSingle+=fabs((*corr)[g[k]][j]);
        corrSum.push_back(corrSumSingle);
        indices.push_back(j);
      }
      vector<double> corrSumSorted=corrSum;
      sort(corrSumSorted.begin(),corrSumSorted.end());

      if (lshInterTableMode==1)
      { // sample from the 10% most uncorrelated
        double thr=corrSumSorted[uint32_t(ceil(0.10*corrSumSorted.size()))];
        vector<uint32_t> topInd;
        for(uint32_t j=0; j<corrSum.size(); ++j)
          if(corrSum[j]<=thr) topInd.push_back(indices[j]);
        g.push_back(topInd[mRnd(topInd.size())]);
      }
      else if(lshInterTableMode==2)
      { // sample from the 10% most correlated
        double thr=corrSumSorted[uint32_t(floor(0.90*corrSumSorted.size()))];
        vector<uint32_t> topInd;
        for(uint32_t j=0; j<corrSum.size(); ++j)
          if(corrSum[j]>=thr) topInd.push_back(indices[j]);
        g.push_back(topInd[mRnd(topInd.size())]);
      }
      else
        assert(false);
      //      cout<<"thr: "<<thr<<endl;
      //      for(uint32_t j=0; j<corrSum.size(); ++j)
      //        cout<<corrSumSorted[j]<<" ";
      //      cout<<endl;
//      for(uint32_t j=0; j<corrSum.size(); ++j)
//        cout<<corrSum[j]<<" ";
//      cout<<endl;
//      for(uint32_t j=0; j<topInd.size(); ++j)
//        cout<<topInd[j]<<" ";
//      cout<<endl;

    }
    // convert into vector of pairs for fast bit lookup
    for(uint32_t i=0; i<mHashLength; ++i)
      mG.push_back(pair<uint32_t,uint32_t>(g[i]/8,g[i]%8));

//    double norm=0.0; //frobenius norm
//    for(uint32_t i=0; i<mHashLength; ++i)
//    {
//      for(uint32_t j=0; j<mHashLength; ++j)
//      {
//        norm+=((*corr)[g[i]][g[j]])*((*corr)[g[i]][g[j]]);
//      }
//      cout<<g[i]<<";";
//    }
//    norm=sqrt(norm);
//    cout<<endl<<"Hashcode correlation norm="<<norm<<endl;
  }
#endif

  LshTable& operator=(const LshTable&);
};

// for stl sort!
inline bool sortAccordingToBriefDataPointer (const std::pair<BriefDesc*, LshTable<BriefDesc>*>& a,
    const std::pair<BriefDesc*, LshTable<BriefDesc>*>& b) {
  return (a.first<b.first);
};

/* LSH class
 *
 * l=4 and k=5 is good for 175544 from looking at test of LSH
 * l=3 and k=1 is almost NN for 175544 from looking at test of LSH
 */
template<class Desc, class Dist>
class LSH : public Classifier<Desc,Dist>
{
public:
//  LSH(const LSH& lsh)
//    : Classifier<Desc,Dist>(lsh.getMapDs(),lsh.getParams()),
//      mBitChangeProb(0), haveCovMatrix(false), mRnd(time(NULL))
//  {};
  LSH(const vector<Desc*>& mapMPs, const Params& lshParams)
    : Classifier<Desc,Dist>(mapMPs,lshParams), mLshParams(lshParams),
      mBitChangeProb(0), haveBitChangeProb(false),
#ifdef HAVE_TOON
      mpCorr(NULL),
#endif
      haveCovMatrix(false), mRnd(time(NULL))
  {};
  LSH(const vector<Desc*>& mapMPs, const Params& lshParams, const vector<double>& bitChangeProb)
    : Classifier<Desc,Dist>(mapMPs,lshParams), mLshParams(lshParams),
      mBitChangeProb(bitChangeProb), haveBitChangeProb(true),
#ifdef HAVE_TOON
      mpCorr(NULL),
#endif
      haveCovMatrix(false), mRnd(time(NULL))
  {};
#ifdef HAVE_TOON
  LSH(const vector<Desc*>& mapMPs, const Params& lshParams,
      const Matrix<BriefDesc::N_BITS,BriefDesc::N_BITS>* pCorr)
    : Classifier<Desc,Dist>(mapMPs,lshParams), mLshParams(lshParams),
      mBitChangeProb(0), haveBitChangeProb(false),
      mpCorr(pCorr), haveCovMatrix(true), mRnd(time(NULL))
  {};
#endif

  ~LSH()
  {
    for(size_t i=0; i<mLshTables.size(); ++i)
      delete mLshTables[i];
  };

  //build the hash-tables
  float prepare(void)
  {
    Timer t0;

//    computeSupportThresholds(); // from hash table count

    // generated by plotLSHresults.m -3sigma
//    double suppThrs[60*32]= {1.000003,2.000000,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,0.719280,2.000000,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,1.112829,2.000000,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,1.536664,2.046895,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,2.152102,2.667603,2.795215,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,2.714546,3.557393,3.555247,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,3.518153,4.317175,4.495813,4.184359,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,4.023475,5.102311,5.467606,5.148282,4.173262,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,4.735495,5.998559,6.422602,6.047088,4.911481,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,5.473742,6.860095,7.278860,6.829592,5.611843,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,6.382769,7.873039,8.264273,7.787520,6.673829,5.154248,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,7.124160,8.783614,9.220789,8.700230,7.486488,5.844107,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,7.747037,9.611600,10.165483,9.670294,8.387637,6.579117,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,8.782562,10.672037,11.066610,10.413232,9.158853,7.750424,6.634896,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,9.450401,11.595422,12.163334,11.583870,10.286768,8.701762,7.258587,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,10.135306,12.479785,13.143554,12.565873,11.186002,9.443202,7.776734,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,10.957166,13.498571,14.228507,13.621920,12.153759,10.298969,8.532498,7.329292,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,11.586611,14.341243,15.206122,14.658763,13.176686,11.237406,9.318441,7.897307,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,12.367736,15.316668,16.258096,15.704180,14.167078,12.158947,10.191947,8.778236,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,13.072552,16.204942,17.226727,16.678351,15.100259,13.032894,11.016701,9.592124,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,13.508612,16.914615,18.187207,17.807476,16.256510,14.015395,11.565218,9.387067,7.962030,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,14.207436,17.819681,19.199770,18.842721,17.243555,14.897290,12.298945,9.943541,8.326095,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,14.880336,18.698847,20.192619,19.866873,18.226832,15.777719,13.024756,10.473165,8.628170,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,15.580271,19.596319,21.185172,20.869247,19.170963,16.612738,13.716992,11.006142,9.002607,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,16.370724,20.609346,22.305176,22.000508,20.237636,17.558854,14.506458,11.622740,9.449995,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,17.066203,21.507306,23.309078,23.031167,21.233222,18.474889,15.315819,12.315658,10.034054,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,17.667489,22.322456,24.268317,24.064408,22.270064,19.444624,16.147422,12.937796,10.375082,9.018617,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,18.294846,23.135900,25.181110,25.003344,23.175470,20.270357,16.860873,13.519886,10.820265,9.334878,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,18.985492,24.047666,26.225360,26.100908,24.256642,21.274896,17.738003,14.228295,11.328107,9.619771,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,19.695020,24.958466,27.236818,27.131981,25.245860,22.180360,18.537385,14.918840,11.926630,10.162659,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,20.281177,25.705493,28.058560,27.959588,26.027786,22.882363,19.142528,15.427490,12.356458,10.548641,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,21.040412,26.680334,29.139620,29.056737,27.070147,23.818317,19.939710,16.072791,12.856025,10.927876,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,21.611767,27.481790,30.117769,30.150272,28.209866,24.927118,20.932597,16.856871,13.330507,10.984072,10.448135,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,22.224241,28.286927,31.037654,31.118407,29.171177,25.837950,21.760716,17.581461,13.942175,11.484845,10.851459,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,22.893345,29.161646,32.030197,32.154543,30.190226,26.792790,22.617778,18.320732,14.557196,11.982714,11.252827,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,23.522062,29.983595,32.962875,33.128148,31.147658,27.689652,23.422374,19.014071,15.132988,12.447370,11.625464,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,24.305877,30.979228,34.053284,34.220142,32.171898,28.600647,24.198485,19.657509,15.669814,12.927495,12.122650,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,24.843846,31.698458,34.892638,35.126460,33.099996,29.513321,25.066507,20.459628,16.392758,13.565969,12.679335,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,25.372911,32.420063,35.752181,36.071976,34.082161,30.485447,25.984549,21.282176,17.081043,14.083862,12.993344,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,25.573334,32.849585,36.458274,37.053023,35.287455,31.815190,27.289850,22.365058,17.694434,13.931601,11.730181,11.743795,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,26.099149,33.553106,37.278911,37.936866,36.187275,32.690439,28.106662,23.096245,18.319492,14.436704,12.108184,11.994235,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,26.557651,34.178519,38.025307,38.761796,37.051765,33.558997,28.947271,23.880369,19.022072,15.036160,12.586415,12.336616,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,27.193520,34.996415,38.934598,39.687819,37.935826,34.358369,29.635194,24.446051,19.470689,15.388855,12.880299,12.624769,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,27.873139,35.886093,39.945639,40.744849,38.976795,35.334552,30.511191,25.199786,20.093409,15.885134,13.268034,12.935181,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,28.702613,36.938163,41.094834,41.890619,40.043511,36.271503,31.292589,25.824761,20.586013,16.294338,13.667729,13.424180,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,29.287229,37.709192,41.979539,42.826837,40.979649,37.166541,32.116078,26.556823,21.217342,16.826201,14.111962,13.803192,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,29.719574,38.293644,42.670332,43.583042,41.765177,37.950142,32.871341,27.262177,21.856055,17.386378,14.586550,14.189975,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,30.395175,39.170221,43.656100,44.601813,42.756361,38.868742,33.687958,27.963009,22.442895,17.876616,15.013174,14.601567,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,31.022618,39.992433,44.591938,45.582499,43.725484,39.782262,34.514200,28.682665,23.049027,18.374652,15.420908,14.949163,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,31.726770,40.913598,45.638141,46.675950,44.802578,40.793579,35.424504,29.470906,23.708338,18.912352,15.858501,15.322337,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,31.628367,41.004897,46.037317,47.436816,45.914584,42.181807,36.949676,30.929378,24.832102,19.369037,15.251371,13.190293,13.896991,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,32.192244,41.746566,46.885090,48.329268,46.800550,43.020385,37.710224,31.591516,25.385713,19.814264,15.598620,13.460230,14.120545,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,32.747315,42.478288,47.724443,49.217544,47.689353,43.871633,38.496146,32.294655,25.998923,20.340711,16.051784,13.863902,14.508830,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,33.255205,43.162337,48.529057,50.092979,48.591719,44.762891,39.344111,33.072994,26.687154,20.924207,16.521768,14.217451,14.748872,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,33.834247,43.913518,49.373434,50.964815,49.438480,45.545245,40.035932,33.661357,27.172341,21.319700,16.854255,14.526823,15.088224,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,34.268328,44.507976,50.085905,51.755553,50.270357,46.383754,40.849180,34.420074,27.849871,21.892009,17.299925,14.827056,15.226838,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,34.931668,45.376940,51.073923,52.788639,51.287109,47.335358,41.699406,35.145277,28.438993,22.346577,17.634052,15.067438,15.412760,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,35.476217,46.094734,51.897073,53.659259,52.157317,48.167274,42.465155,35.826984,29.028788,22.846591,18.056419,15.434298,15.756253,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,35.943097,46.716378,52.618612,54.432945,52.942523,48.930493,43.180001,36.474194,29.596217,23.329219,18.456344,15.760740,16.025553,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,36.479367,47.429972,53.445484,55.316639,53.834173,49.788824,43.971328,37.172421,30.182841,23.793324,18.794606,15.977425,16.132518,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000};
    // generated by plotLSHresults.m -4sigma
//    double suppThrs[60*32]={1.000003,2.000000,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,0.538659,2.000000,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,0.842815,2.000000,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,1.184079,2.000000,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,1.715238,1.905076,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,2.198668,2.622239,2.410205,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,2.891534,3.305152,3.062091,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,3.224184,3.966808,3.981061,3.238006,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,3.869332,4.727217,4.729038,3.879525,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,4.472791,5.489047,5.463346,4.337584,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,5.260272,6.288358,6.267746,5.403973,3.902575,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,5.944697,7.074480,7.030247,6.076732,4.478673,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,6.488260,7.774249,7.794198,6.813229,5.096465,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,7.252996,8.661196,8.658770,7.566902,5.706780,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,8.003072,9.462663,9.424034,8.359537,6.741528,5.042361,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,8.681633,10.244136,10.189632,9.052513,7.367171,5.667998,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,9.381253,11.114123,11.112758,9.934778,8.137801,6.279448,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,9.816533,11.785097,11.967634,10.863326,8.971350,6.790888,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,10.612981,12.676964,12.816644,11.622936,9.686752,7.599008,5.950617,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,11.267002,13.460870,13.620269,12.378058,10.367093,8.220230,6.570328,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,11.951156,14.252252,14.394919,13.068416,10.961998,8.764923,7.166448,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,12.549820,15.015122,15.231292,13.902937,11.734663,9.431077,7.696785,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,13.164893,15.790286,16.069063,14.723900,12.477468,10.052442,8.171493,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,13.669167,16.514382,16.946750,15.653312,13.321112,10.637191,8.288592,6.962357,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,14.379148,17.409312,17.913684,16.599677,14.174705,11.346182,8.821521,7.308135,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,14.993529,18.189675,18.766991,17.450478,14.965134,12.035959,9.387951,7.746110,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,15.511804,18.897421,19.598624,18.331721,15.813018,12.758823,9.885442,7.909183,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,16.130594,19.648355,20.377542,19.067675,16.468274,13.328857,10.398945,8.428058,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,16.850492,20.520858,21.282237,19.924260,17.236562,14.008775,11.030531,9.091462,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,17.442146,21.289042,22.141979,20.799821,18.061434,14.725683,11.591434,9.457551,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,17.964335,21.938581,22.833875,21.468498,18.660732,15.228858,11.991157,9.765910,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,18.387926,22.638945,23.789312,22.592297,19.801167,16.169192,12.449640,9.395780,7.760879,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,19.052826,23.472227,24.687301,23.475651,20.614880,16.882591,13.056385,9.913866,8.232637,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,19.608227,24.182841,25.472892,24.271648,21.372378,17.568349,13.652829,10.419087,8.660390,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,20.269196,25.007046,26.355623,25.133861,22.160694,18.255058,14.235885,10.922112,9.132671,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,20.798059,25.699356,27.139500,25.945286,22.943508,18.960959,14.824433,11.360726,9.396630,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,21.484188,26.568209,28.085418,26.882560,23.806380,19.703625,15.421040,11.805370,9.703362,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,22.104734,27.312564,28.847826,27.595573,24.440859,20.268738,15.964263,12.412489,10.498468,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,22.589191,27.956923,29.593737,28.391314,25.241336,21.035483,16.665437,13.022879,10.999490,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,23.201925,28.732051,30.437203,29.227701,26.013864,21.706011,17.214461,13.449533,11.321548,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,23.340181,29.099601,31.080377,30.120645,27.058547,22.732220,17.979803,13.639436,10.549258,9.547407,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,23.761451,29.655046,31.717950,30.796352,27.736440,23.384403,18.586428,14.188705,11.037422,9.978767,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,24.347794,30.393102,32.515913,31.581266,28.454195,23.999737,19.082930,14.568810,11.322414,10.208777,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,25.012122,31.233000,33.430050,32.489439,29.297328,24.739885,19.703271,15.073653,11.737195,10.580060,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,25.752380,32.164657,34.436448,33.477143,30.196135,25.502813,20.306570,15.516796,12.042884,10.794223,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,26.352315,32.918670,35.252064,34.283273,30.943074,26.162245,20.871561,16.001800,12.483739,11.248154,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,26.732143,33.425108,35.840095,34.912849,31.579111,26.774625,21.435133,16.496379,12.894105,11.564054,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,27.392029,34.252899,36.732536,35.789954,32.384166,27.474186,22.019027,16.977705,13.309231,11.972620,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,27.502147,34.598890,37.379682,36.733504,33.549341,28.716172,23.122981,17.658749,13.212460,10.673094,10.929634,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,28.177176,35.456813,38.319833,37.675543,34.433247,29.502249,23.791855,18.211370,13.670099,11.077346,11.342416,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,28.582283,36.011915,38.983909,38.408474,35.195819,30.256153,24.499686,18.836626,14.177182,11.431563,11.509979,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,29.066105,36.647462,39.708337,39.167151,35.942323,30.952272,25.115418,19.350181,14.574979,11.708233,11.668361,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,29.590741,37.320571,40.455230,39.927592,36.670534,31.616933,25.699666,19.851607,15.005634,12.094624,12.051451,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,30.020703,37.900628,41.137836,40.669054,37.431010,32.360431,26.394043,20.468575,15.520753,12.487304,12.304956,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,30.592829,38.618927,41.912472,41.429671,38.126730,32.959855,26.885251,20.859126,15.837685,12.777135,12.633681,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,30.957292,39.118830,42.511890,42.094010,38.822729,33.655585,27.550114,21.463854,16.354344,13.179122,12.895725,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,31.572495,39.914851,43.402857,43.007775,39.700869,34.453400,28.236630,22.021823,16.780239,13.483143,13.101795,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,32.084850,40.572806,44.133829,43.753190,40.416162,35.108017,28.814027,22.519464,17.209601,13.869710,13.485062,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,32.549021,41.164867,44.786450,44.413182,41.044478,35.679749,29.318408,22.959869,17.603545,14.248848,13.895192,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,33.031679,41.799116,45.510043,45.172291,41.793695,36.382086,29.945298,23.491165,18.027518,14.562190,14.103016,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000};
    // generated by plotLSHresults.m -5sigma
    double suppThrs[60*32]={1.000002,2.000000,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,0.403426,2.000000,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,0.638302,2.000000,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,0.912377,2.000000,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,1.367058,2.000000,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,1.780771,1.932931,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,2.407031,2.482688,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,2.564034,3.217109,2.700982,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,3.171727,3.804605,3.316185,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,3.696737,4.474374,3.858495,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,4.384370,5.078155,4.742598,3.527149,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,4.983625,5.769417,5.380815,3.985839,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,5.505094,6.334271,5.939229,4.597449,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,6.116082,7.176108,6.770910,5.018005,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,6.888950,7.774479,7.261920,5.923980,4.333367,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,7.502570,8.453371,7.888442,6.447186,4.769008,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,8.088296,9.224809,8.721218,7.182822,5.214920,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,8.419364,9.787692,9.461097,7.949722,5.763710,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,9.106821,10.532939,10.165869,8.630890,6.553277,4.558307,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,9.651992,11.204616,10.864786,9.273306,7.070980,4.898612,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,10.236022,11.891287,11.539859,9.855421,7.511652,5.182235,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,10.749625,12.543449,12.245263,10.536932,8.100322,5.617298,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,11.419049,13.255036,12.878349,11.070891,8.614565,6.291274,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,11.924299,13.914348,13.606612,11.777470,9.203302,6.660487,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,12.620638,14.721274,14.402881,12.502565,9.857427,7.304573,5.681106,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,13.199504,15.417502,15.116961,13.168646,10.443320,7.811747,6.144690,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,13.654270,16.031820,15.826846,13.901537,11.118080,8.338664,6.425475,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,14.225580,16.702802,16.492486,14.495442,11.612479,8.744406,6.792032,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,14.810436,17.444318,17.293516,15.268959,12.281574,9.242290,7.062035,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,15.361682,18.131018,18.025595,15.975802,12.912031,9.764671,7.464114,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,15.804423,18.681266,18.608084,16.529232,13.389066,10.131943,7.702218,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,16.426630,19.453582,19.426973,17.313444,14.079637,10.692194,8.117757,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,16.910532,20.140834,20.251060,18.176410,14.852085,11.213285,8.195210,6.733062,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,17.446711,20.788867,20.919839,18.804724,15.408621,11.696625,8.633834,7.185345,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,18.068254,21.541054,21.694159,19.524069,16.027284,12.200303,9.039627,7.541755,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,18.511900,22.122179,22.350355,20.197400,16.664286,12.751984,9.461466,7.793702,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,19.151794,22.910311,23.178850,20.984406,17.353972,13.314541,9.893108,8.116665,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,19.728420,23.585204,23.845645,21.577038,17.846673,13.721846,10.269848,8.557972,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,20.248124,24.211526,24.493508,22.194459,18.414768,14.254826,10.815021,9.195743,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,20.776288,24.885226,25.230303,22.922846,19.074181,14.795635,11.198535,9.394207,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,21.194266,25.426756,25.834635,23.535934,19.648686,15.290922,11.580675,9.635975,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,21.557188,25.903021,26.375677,24.098423,20.194521,15.787237,11.999835,9.955579,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,21.667649,26.292092,27.091012,25.072039,21.242805,16.610939,12.184073,8.969838,7.975864,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,22.304437,27.071259,27.904204,25.839543,21.913546,17.162484,12.622628,9.330248,8.321614,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,23.009385,27.930516,28.795240,26.671591,22.627606,17.731320,13.050770,9.653991,8.609019,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,23.537100,28.594863,29.513190,27.376660,23.269854,18.277354,13.483740,9.973593,8.831495,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,23.847791,29.012537,30.001086,27.899724,23.794737,18.772410,13.919030,10.320881,9.064249,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,24.478834,29.781265,30.798750,28.647147,24.442317,19.300120,14.336416,10.667065,9.407928,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,25.009545,30.450474,31.524470,29.364600,25.103932,19.875531,14.812464,11.047798,9.714600,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,25.622293,31.218431,32.350562,30.172801,25.839266,20.504071,15.321335,11.445173,10.029702,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,26.020990,31.736108,32.934099,30.778943,26.434617,21.065101,15.834371,11.906407,10.445187,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,26.480107,32.322352,33.579380,31.427397,27.042604,21.601207,16.279408,12.253412,10.699422,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,26.923253,32.894135,34.216973,32.078139,27.664003,22.160936,16.755307,12.633489,10.981851,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,27.253297,33.358277,34.785107,32.715420,28.330848,22.813025,17.343583,13.104156,11.276377,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,27.838781,34.059159,35.495255,33.360239,28.867283,23.229559,17.660237,13.372489,11.579486,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,27.555253,34.032732,35.886973,34.191694,30.020614,24.447452,18.545925,13.389751,10.052649,9.608338,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,28.152495,34.786100,36.703727,34.997852,30.760947,25.085488,19.063949,13.788803,10.352525,9.847590,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,28.603051,35.361854,37.338593,35.638076,31.365110,25.624502,19.521058,14.159587,10.644893,10.081786,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,28.979508,35.850279,37.886836,36.201802,31.907798,26.117448,19.943373,14.498197,10.894541,10.245029,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000,29.372814,36.376187,38.497466,36.852237,32.556090,26.724609,20.473384,14.918002,11.174049,10.357114,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000,21.000000,22.000000,23.000000,24.000000,25.000000,26.000000,27.000000,28.000000,29.000000,30.000000,31.000000,32.000000};

    uint32_t m=mLshParams.getM();
    uint32_t l=mLshParams.getL();
    assert(l<=60);
    mBitSuppThrLow=floor(suppThrs[(m-1)+(l-1)*32]);
    cout<<"m="<<m<<" l="<<l<<" mBitSuppThrLow="<<mBitSuppThrLow<<endl;

    // erase everything since params might have changed
    if(mLshTables.size()!=0) mLshTables.clear();
    if(haveBitChangeProb)
    {
      //    cout<<"Hash function: bit positions sampled from bit change probability"<<endl;
      for(uint32_t i=0; i<mLshParams.getL(); ++i)
        mLshTables.push_back(new LshTable<Desc>(mRnd, mLshParams, mBitChangeProb));
    } else {
      if(mLshParams.getLshIntraTableMode()==0)
      { // random
        mRnd.resetRepetitions();
        for(uint32_t i=0; i<mLshParams.getL(); ++i)
          mLshTables.push_back(new LshTable<Desc>(mRnd, mLshParams));
      }
#ifdef HAVE_TOON
      else if(mLshParams.getLshIntraTableMode()==1)
      { // most uncorrelated
        assert(haveCovMatrix);
        vector<uint32_t> g;
        g.push_back(mRnd(BriefDesc::N_BITS));
        for(uint32_t i=0; i<mLshParams.getL(); ++i)
        {
          uint32_t giMin=LshTable<Desc>::getMostUncorrelated(mpCorr,g);
          g.push_back(giMin);
          mLshTables.push_back(new LshTable<Desc>(mRnd, mLshParams, mpCorr, giMin));
        }
      }else if(mLshParams.getLshIntraTableMode()==2)
      {// get most correlated
        assert(haveCovMatrix);
        vector<uint32_t> g;
        g.push_back(mRnd(BriefDesc::N_BITS));
        for(uint32_t i=0; i<mLshParams.getL(); ++i)
        {
          uint32_t giMax=LshTable<Desc>::getMostCorrelated(mpCorr,g);
          g.push_back(giMax);
          mLshTables.push_back(new LshTable<Desc>(mRnd, mLshParams, mpCorr, giMax));
        }
      }
#else
      else{
        cout<<"Do not have TooN -> no correlation/mutual information based LshTables"<<endl;
        assert(false);
      }
#endif
    }

    BOOST_FOREACH(Desc* mapD, this->mMapDs)
    {
      assert(mapD !=NULL);
      for(uint32_t i=0; i<mLshParams.getL(); ++i)
      { // fill hash-tables
        mLshTables[i]->store(mapD);
      }
    }

    return t0.toc();
  };

  // evaluate support of returned match
  bool pair(Desc* queryD, Assoc<Desc,Dist>& annPair, uint32_t& nRetrieved, uint32_t& support)
  {
//    cout<<"lsh eval support"<<endl;
    vector<Desc*> candidates;
    vector<uint32_t> supports;
    getCandidatesSorted(queryD, candidates);//, supports);
//    map<Desc*,uint32_t> supports;
//    getCandidatesSortedThresholded(queryD, candidates, supports);// do the thresholding internally
    nRetrieved=candidates.size();
    if(nRetrieved>0){
      NearestNeighbor<Desc,Dist> NN(candidates);
      vector<Assoc<Desc,Dist> > annPairs;
      NN.pair(queryD, annPairs);
      annPair=annPairs[0]; // TODO: could be done for the whole vector as well
//      assert(supports.find(annPair.m) != supports.end());
//      support=supports[annPair.m];
      for(uint32_t i=0; i<candidates.size();++i)
        if(candidates[i]==annPair.m){
          support=supports[i];
          assert(support>0);
          break;
        }
      return true;
    }else{
      support=0;
      annPair=Assoc<Desc,Dist>(queryD,NULL);
      return false;
    }
  };

  bool pair(Desc* queryD, vector<Assoc<Desc,Dist> >& annPair, uint32_t& nRetrieved)
  {
    vector<Desc*> candidates;
    getCandidatesSorted(queryD, candidates);
    nRetrieved=candidates.size();
    if(nRetrieved>0){
      //    cout<<candidates.size()<<endl;
      NearestNeighbor<Desc,Dist> NN(candidates);
      NN.pair(queryD, annPair);
      return true;
    }else{
//      annPair=Assoc<Desc,Dist>(queryD,NULL);
      return false;
    }
  };
  bool pair(Desc* queryD, vector<Assoc<Desc,Dist> >& annPair)
  {
    uint32_t nRetrieved;
    return pair(queryD, annPair,nRetrieved);
  }

  /* definitely pair - if no match is found random bits are flipped to get
   * candidates from nearby buckets
   *
   * Returns the number of trials until aNN was found
   */
  uint32_t pairAllways(Desc* queryD, vector<Assoc<Desc,Dist> >& annPairs, uint32_t& nRetrieved)
  {
    uint32_t trials=0;
    BriefDescS queryPerm; queryPerm.copyDataFrom(queryD);
    vector<Desc*> candidates;

    uint32_t flipPos=9999;
    while(candidates.size()==0)
    { // tries to flip as low an amount of bits with respect to the original string as possible
      for(uint32_t i=0; i<BriefDesc::N_BITS/2; ++i)
      { // flip one single bit each time without repetition
        getCandidatesSorted(&queryPerm, candidates);
        if(candidates.size()>0) break;
        if(9999!= flipPos) queryPerm.bd[flipPos/8] ^= uint8_t(1<<(flipPos%8)); // flip back
        // flip one random bit
//        flipPos=mRnd.drawWithoutRepetition(BriefDesc::N_BITS,i==0);
        flipPos=mRnd(BriefDesc::N_BITS);
        assert(flipPos<256);
        queryPerm.bd[flipPos/8] ^= uint8_t(1<<(flipPos%8));
//        cout<<flipPos<<" "<<flipPos/8<<" "<<flipPos%8<<endl;
        ++trials;
      }
      // one bit from original string keeps flipped here since we do not flip back
    }
    nRetrieved=candidates.size();
    NearestNeighbor<Desc,Dist> NN(candidates);

    NN.pair(queryD, annPairs); // search for NN to original query! permutations just for finding candidates
    return trials;
  };
  uint32_t pairAllways(Desc* queryD, vector<Assoc<Desc,Dist> >& annPairs)
  {
    uint32_t nRetrieved;
    return pairAllways(queryD,annPairs,nRetrieved);
  };

  /* k-LSH retrieves the approximate k nearest neighbours
   */
  void kPair(Desc* queryD, vector<Assoc<Desc,Dist> >& annPair, uint32_t& nRetrieved, uint32_t k)
  {
    vector<Desc*> candidates;
    getCandidatesSorted(queryD, candidates);
    nRetrieved=candidates.size();
    if(nRetrieved>0){
      //    cout<<candidates.size()<<endl;
      NearestNeighbor<Desc,Dist> NN(candidates);
      NN.kPair(queryD, annPair,k);
    }else{
      annPair.clear();
    }
  }
  void kPair(Desc* queryD, vector<Assoc<Desc,Dist> >& annPair, uint32_t k)
  {
    uint32_t nRetrieved;
    kPair(queryD, annPair,nRetrieved,k);
  }

protected:
  LshParams mLshParams;
  vector<double> mBitChangeProb;
  bool haveBitChangeProb;
#ifdef HAVE_TOON
  const Matrix<BriefDesc::N_BITS,BriefDesc::N_BITS>* mpCorr;
#endif
  bool haveCovMatrix;
  vector<LshTable<Desc>* > mLshTables;
  Random mRnd;

  uint32_t mBitSuppThrLow;

  uint32_t mSuppThrHigh; // support from hashtable count
  uint32_t mSuppThrLow;

  // formula derived in matlab (supportCurves.m);
  // assumption: threshold only depends on m not on l
  void computeSupportThresholds()
  {
    double a,b,c;

    a=1.1965; b=0.4085; c=-0.4014;// MutInfMinMin 3sigma
    a=0.9261; b=0.2317; c=-0.2447;// MutInfMinMin 2sigma
//    a=1.0902; // UnifUnif
//    b=0.3874;
//    c=-0.3137;
    double thrLow=a*exp(-b*double(this->mLshParams.getM()))+c;
    if(thrLow<=0.0)
      mSuppThrLow=0;
    else
      mSuppThrLow = uint32_t(floor(thrLow));

    a=1.4699; b=0.0412; c=0.0345;// MutInfMinMin 3sigma
    a=1.2102; b=0.0540; c=0.0801;// MutInfMinMin 2sigma
//    a=1.1312;  // UnifUnif
//    b=0.0610;
//    c=0.3842;
    double thrHigh=a*exp(-b*double(this->mLshParams.getM()))+c;
    if(thrHigh<=0.0)
      mSuppThrHigh =0;
    else
      mSuppThrHigh  = uint32_t(ceil(thrHigh));
  }

  void getCandidatesSorted(Desc* queryD, vector<Desc*>& candidates)
  {
    //  map<MapPoint*,bool> candMap;
    //  uint32_t nAllCandidates=0;
    //  for(uint32_t i=0; i<ml; ++i)
    //  {
    //    vector<MapPoint*> c=mLshTables[i]->get(queryMP);
    //    nAllCandidates+=c.size();
    //    for(uint32_t j=0; j<c.size(); ++j)
    //      candMap[c[j]]=true;
    //  }
    //  vector<MapPoint*> candidates; candidates.reserve(candMap.size());
    //  for(map<MapPoint*,bool>::iterator it=candMap.begin(); it!=candMap.end(); it++)
    //    candidates.push_back(it->first);
    for(uint32_t i=0; i<mLshParams.getL(); ++i)
    {
      assert(mLshTables[i]!=NULL);
      const vector<Desc*>* pC=mLshTables[i]->get(queryD);
      if(pC==NULL) continue;
      assert(pC!=NULL);
//      cout<<"#newCands="<<pC->size()<<endl;
      candidates.reserve(candidates.size()+pC->size());
      for(uint32_t j=0; j<pC->size(); ++j)
        candidates.push_back(pC->at(j));
    }
    if(candidates.size()>1){
      sort(candidates.begin(), candidates.end()); // sort according to pointer location to find duplicates
      uint32_t j=0;
      for(uint32_t i=1; i<candidates.size(); ++i) // remove duplicates
        if(candidates[i] != candidates[j])
        {
          ++j;
          candidates[j]=candidates[i];
        }
      candidates.resize(j+1,NULL); // resize so that only the non-duplicates are left in candAll
    }
  };

//  void getCandidatesSorted(Desc* queryD, vector<Desc*>& candidates, vector<uint32_t>& supports)
//  {
//    vector<std::pair<Desc*,LshTable<Desc>* > > candPair;
//    for(uint32_t i=0; i<mLshParams.getL(); ++i)
//    {
//      assert(mLshTables[i]!=NULL);
//      const vector<Desc*>* pC=mLshTables[i]->get(queryD);
//      if(pC==NULL) continue;
//      assert(pC!=NULL);
//      candPair.reserve(candPair.size()+pC->size());
//      for(uint32_t j=0; j<pC->size(); ++j)
//        candPair.push_back(std::pair<Desc*, LshTable<Desc>* > (pC->at(j),mLshTables[i]));
//    }
//    if(candPair.size()>1)
//    {
//      // sort according to pointer location to find duplicates
//      sort(candPair.begin(), candPair.end(), sortAccordingToBriefDataPointer);
//
//      BriefDescS jointSupport; jointSupport.setZero();
//      uint32_t j=0;
//      candidates.reserve(candidates.size()+candPair.size());
//      candidates.push_back(candPair[0].first);
//      candPair[0].second->signalSupport(jointSupport);
//      for(uint32_t i=1; i<candPair.size(); ++i) // remove duplicates
//        if(candPair[i].first != candPair[j].first)
//        {
//          supports.push_back(jointSupport.nOnes()); // support is the union of bit positions that all hash tables look at
//          ++j;
//          candPair[j]=candPair[i];
////          assert(supports.find(candPair[j].first) == supports.end());
////          supports[candPair[j].first]=1;
//          candidates.push_back(candPair[j].first);
//          jointSupport.setZero(); // reset joint support
//          candPair[i].second->signalSupport(jointSupport);
//        }else{
////          assert(supports.find(candPair[j].first) != supports.end());
////          supports[candPair[j].first]++;
//          candPair[i].second->signalSupport(jointSupport); // add the support of the ith hash table
//        }
//      supports.push_back(jointSupport.nOnes()); // support is the union of bit positions that all hash tables look at
//      candidates.resize(j+1,NULL); // resize so that only the non-duplicates are left in candAll
//    }else if(candidates.size()==1){
//      BriefDescS jointSupport; jointSupport.setZero();
//      candPair[0].second->signalSupport(jointSupport); // add the support of the ith hash table
//      supports.push_back(jointSupport.nOnes());
//      candidates.push_back(candPair[0].first);
//    }
//    assert(supports.size()==candidates.size());
//  };

//  /* support thresholded according to hash function bits support
//   */
//  void getCandidatesSortedThresholded(Desc* queryD, vector<Desc*>& candidates, vector<uint32_t>& supports)
//  {
//    vector<std::pair<Desc*,LshTable<Desc>* > > candPair;
//    for(uint32_t i=0; i<mLshParams.getL(); ++i)
//    {
//      assert(mLshTables[i]!=NULL);
//      const vector<Desc*>* pC=mLshTables[i]->get(queryD);
//      if(pC==NULL) continue;
//      assert(pC!=NULL);
//      candPair.reserve(candPair.size()+pC->size());
//      for(uint32_t j=0; j<pC->size(); ++j)
//        candPair.push_back(std::pair<Desc*, LshTable<Desc>* > (pC->at(j),mLshTables[i]));
//    }
//    if(candPair.size()>1)
//    {
//      // sort according to pointer location to find duplicates
//      sort(candPair.begin(), candPair.end(), sortAccordingToBriefDataPointer);
//
//      BriefDescS jointSupport; jointSupport.setZero();
//      uint32_t j=0;
//      candidates.reserve(candidates.size()+candPair.size());
//      candidates.push_back(candPair[0].first);
//      candPair[0].second->signalSupport(jointSupport);
//
//      cout<<"m="<<mLshParams.getM()<<" l="<<mLshParams.getL()<<" mBitSuppThrLow="<<mBitSuppThrLow<<endl;
//      for(uint32_t i=1; i<candPair.size(); ++i) // remove duplicates
//        if(candPair[i].first != candPair[j].first)
//        {
//          uint32_t jointSupp=jointSupport.nOnes();
//          cout<<jointSupp<<" ";
//          if(jointSupp>=mBitSuppThrLow)
//          { // do add to candidate set
//            supports.push_back(jointSupp); // support is the union of bit positions that all hash tables look at
//            ++j;
//            candidates.push_back(candPair[j].first);
//          } // else: overwrite previous candidate
//          candPair[j]=candPair[i];
//          jointSupport.setZero(); // reset joint support
//          candPair[i].second->signalSupport(jointSupport);
//        }else{
//          candPair[i].second->signalSupport(jointSupport); // add the support of the ith hash table
//        }
//      cout<<endl;
//      uint32_t jointSupp=jointSupport.nOnes();
//      if(jointSupp>=mBitSuppThrLow)
//      {
//        supports.push_back(jointSupport.nOnes()); // support is the union of bit positions that all hash tables look at
//        candidates.resize(j+1,NULL); // resize so that only the non-duplicates are left in candAll
//      }else{
//        candidates.resize(j,NULL); // resize so that only the non-duplicates are left in candAll
//      }
//    }else if(candidates.size()==1){
//      BriefDescS jointSupport; jointSupport.setZero();
//      candPair[0].second->signalSupport(jointSupport); // add the support of the ith hash table
//      uint32_t jointSupp=jointSupport.nOnes();
//      if(jointSupp>=mBitSuppThrLow)
//      {
//        supports.push_back(jointSupport.nOnes());
//        candidates.push_back(candPair[0].first);
//      }
//    }
//    assert(supports.size()==candidates.size());
//    cout<<"Discarded "<<double(candPair.size()-candidates.size())/double(candPair.size())<<endl;
//  };

  /* support thresholded according to table count
   */
//  void getCandidatesSortedThresholded(Desc* queryD, vector<Desc*>& candidates, map<Desc*,uint32_t>& supports)
//  {
//    for(uint32_t i=0; i<mLshParams.getL(); ++i)
//    {
//      assert(mLshTables[i]!=NULL);
//      const vector<Desc*>* pC=mLshTables[i]->get(queryD);
//      if(pC==NULL) continue;
//      assert(pC!=NULL);
//      candidates.reserve(candidates.size()+pC->size());
//      for(uint32_t j=0; j<pC->size(); ++j)
//        candidates.push_back(pC->at(j));
//    }
//    if(candidates.size()>1){
//      sort(candidates.begin(), candidates.end()); // sort according to pointer location to find duplicates
//      uint32_t j=0;
//      vector<uint32_t> supportsV(1,1); supportsV.reserve(candidates.size());
//      for(uint32_t i=1; i<candidates.size(); ++i) // remove duplicates
//        if(candidates[i] != candidates[j])
//        {
//          if(supports[candidates[j]]>=mSuppThrLow || supports[candidates[j]]<=mSuppThrHigh)
//          { // do add to candidate set
//            ++j;
//            supportsV.push_back(1);
//          }// else: overwrite previous candidate
//          candidates[j]=candidates[i];
//          supportsV[j]=1;
//        }else{
////          assert(supports.find(candidates[j]) != supports.end());
//          supportsV[j]++;
//        }
//      candidates.resize(j+1,NULL); // resize so that only the non-duplicates are left in candAll
//      assert(candidates.size()==supportsV.size());
//
//      // use vector inside loop but give map for fast search outside
//      for(uint32_t i=0; i<candidates.size(); ++i){
//        supports[candidates[i]]=supportsV[i];
//      }
//
//    }else if(candidates.size()==1){
//      supports[candidates[0]]=1;
//    }
//  };
};




#endif /* LSH_HPP_ */
